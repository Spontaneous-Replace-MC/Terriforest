//file:noinspection GroovyAccessibility
//file:noinspection GroovyAssignabilityCheck
//file:noinspection UnnecessaryQualifiedReference
plugins {
	id 'fabric-loom' version '1.5-SNAPSHOT'
	id 'maven-publish'
}

version = project.mc_main_version + "-" + project.mod_version + "+" + project.mod_ex_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// 添加存储库以从此处检索工件.
	// 你应该只在依赖其他模组时使用它，因为
	// Loom 添加必要的 maven 存储库以自动下载 Minecraft 和库.
	// 见 https://docs.gradle.org/current/userguide/declaring_repositories.html
	// 有关存储库的更多信息.
	
	maven { url "https://maven.terraformersmc.com/releases/" }
	maven {
		url = "https://maven.pkg.github.com/silk-mc/silk-api"
		credentials {
			username = System.getenv("GITHUB_ACTOR")
			password = System.getenv("GITHUB_TOKEN")
		}
	}
	maven {
		url = "https://maven.pkg.github.com/${project.organizations_name}/spontaneous-replace"
		credentials {
			username = System.getenv("GITHUB_ACTOR")
			password = System.getenv("GITHUB_TOKEN")
		}
	}
}

loom {
	splitEnvironmentSourceSets()
	
	mods {
		"modid" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}
}

sourceSets {
	main {
		resources {
			srcDirs += [
					'src/main/generated'
			]
		}
	}
}

dependencies {
	// 要更改版本, 请参阅 gradle.properties 文件
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	
	// Fabric API. 这在理论上是可选的, 但无论如何您都可能需要它.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	
	// 取消注释以下行以启用已弃用的 Fabric API 模块.
	// 这些包含在 Fabric API 发布版本中, 允许您在以后更方便的时候将您的模块更新为最新的模块.
	// modImplementation "net.fabricmc.fabric-api:fabric-api-deprecated:${project.fabric_version}"
	
	// 本模组所需要添加使用的其他 API 模块
	modCompileOnly modRuntimeOnly("com.terraformersmc:modmenu:${project.mod_menu_version}"), {
		exclude(group: "net.fabricmc.fabric-api")
	}
	modImplementation "pers.saikel0rado1iu:silk-api:${project.silk_version}"
	modImplementation "pers.saikel0rado1iu:spontaneous-replace:${project.spontaneous_replace_version}"
	
	// 本模组所需要添加使用的本地模组库
	modImplementation fileTree(dir: 'libs', includes: ['*.jar'])
}

fabricApi {
	configureDataGeneration {
		modId = project.mod_id
	}
}

processResources {
	inputs.property "version", project.version
	
	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// Minecraft 1.18 (1.18-pre2) 及以上使用 Java 17.
	it.options.release = 17
	// 使用 UTF-8 编码
	options.encoding = 'UTF-8'
}

tasks.withType(Javadoc).configureEach {
	options {
		encoding = 'UTF-8'
		charSet = 'UTF-8'
	}
}

java {
	// Loom 会自动将 sourcesJar 附加到 RemapSourcesJar 任务和 “build” 任务
	// 如果其存在.
	// 如果删除此行，则不会生成源.
	withSourcesJar()
	// 生成文档
	withJavadocJar()
	
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}" }
	}
}

tasks.register('deleteRemoteArtifact', Delete) {
	doLast {
		// 使用 GitHub Packages API 获取特定包的所有版本
		def versionsUrl = "https://api.github.com/users/${project.organizations_name}/packages/maven/${project.maven_group}.${archivesBaseName}/versions"
		def headers = ['Authorization': "token ${System.getenv("GITHUB_TOKEN")}"]
		
		def versionsResponse
		def connection = new URL(versionsUrl).openConnection() as HttpURLConnection
		headers.each { k, v -> connection.setRequestProperty(k, v) }
		
		if (connection.responseCode == 200) {
			versionsResponse = connection.inputStream.text
		} else {
			println "Failed to fetch versions. Response code: ${connection.responseCode}"
			return
		}
		
		// 解析 JSON 响应以获取版本列表
		def versions = new groovy.json.JsonSlurper().parseText versionsResponse
		
		// 遍历版本列表并执行删除操作
		versions.each { ver ->
			def versionId = ver.id // 获取版本的标识符
			def versionName = ver.name // 获取版本的名称
			
			if (versionName != version) return
			
			// 执行删除操作
			def deleteUrl = "https://api.github.com/users/${project.organizations_name}/packages/maven/${project.maven_group}.${archivesBaseName}/versions/${versionId}"
			def deleteResponse = new URL(deleteUrl).openConnection()
					.with {
						requestMethod = 'DELETE'
						headers.each { k, v -> setRequestProperty(k, v) }
						connect()
						getResponseCode()
					}
			
			// 打印操作结果
			if (deleteResponse == 204) {
				println "Successfully deleted version ${versionName} (${versionId}) of package ${deleteUrl} from GitHub Packages."
			} else {
				println "Failed to delete version ${versionName} (${versionId}) of package ${deleteUrl} from GitHub Packages. Response code: ${deleteResponse}"
			}
		}
	}
}

tasks.configureEach { task ->
	if (task.name.startsWith('publish')) {
		task.dependsOn 'deleteRemoteArtifact'
	}
}

// 配置 Maven 发布
publishing {
	publications {
		mavenJava(MavenPublication) {
			artifactId archivesBaseName
			from components.java
			// 发布源码
			artifact sourcesJar
		}
	}
	
	// 有关如何设置发布的信息, 请参阅 https://docs.gradle.org/current/userguide/publishing_maven.html
	repositories {
		// 添加要发布到此处的存储库.
		// 注意: 这个语句块与顶层的块功能不同.
		// 这里的存储库将用于发布您的工件, 而不是用于检索依赖项.
		maven {
			name = "GitHubPackages"
			url = "https://maven.pkg.github.com/${project.organizations_name}/${project.archives_base_name}"
			credentials {
				username = System.getenv("GITHUB_ACTOR")
				password = System.getenv("GITHUB_TOKEN")
			}
		}
	}
}